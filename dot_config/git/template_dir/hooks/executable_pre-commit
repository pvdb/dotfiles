#!/usr/bin/env bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
  against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z "${against}" |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
# exec git diff-index --check --cached "${against}" --

#
# Prevent committing files that contain:
#
# (1) Windows line-endings
# (2) trailing whitespace
# (3) non-ASCII characters
#
# Bypass it with the --no-verify option to git-commit.
#
# See also:
#
# http://stackoverflow.com/questions/591923/make-git-automatically-remove-trailing-whitespace-before-committing
#

count=0 ; # number of files containing Windows line-endings, trailing whitespace and/or non-ASCII characters

# git secrets --pre_commit_hook -- "$@" ; count=$? ; # start with 1 if git secrets found a problem

for file in $(git diff-index --name-only --cached "${against}" --) ; do
  [ -f "${file}" ] || continue ; # in case of "git rm"
  case $(basename "${file}") in
    *.gpg | *.db | *.pdf | *.keychain |*.ico | *.png | *.gif | *.jpg )
      # NOOP TODO find better way to determine "binary" files
    ;;
    * )
      pcregrep -q '\x0d$' "${file}" && {
        echo -e "Detected \033[7mWindows line-endings\033[0m in \033[7m${file}\033[0m" ;
        echo "Windows line-endings found on the following line(s)..." ;
        pcregrep -n '\x0d$' "${file}" | cat -e ;
        (( count++ )) ;
      }
      pcregrep -q '[[:blank:]]+$' "${file}" && {
        echo -e "Detected \033[7mtrailing whitespace\033[0m in \033[7m${file}\033[0m" ;
        echo "Trailing whitespace found on the following line(s)..." ;
        pcregrep -n '[[:blank:]]+$' "${file}" | cat -e ;
        (( count++ )) ;
      }
      pcregrep -q '[^\x00-\x7F]' "${file}" && {
        echo -e "Detected \033[7mnon-ASCII characters\033[0m in \033[7m${file}\033[0m" ;
        echo "Non-ASCII characters found on the following line(s)..." ;
        pcregrep -n --color --utf-8 '[^\x00-\x7F]' "${file}" ;
        (( count++ )) ;
      }
    ;;
  esac
  case $(basename "${file}") in
    *.rb )
      false && [ -x "$(command -v rubocop)" ] && ! rubocop "${file}" &> /dev/null && {
        rubocop "${file}" ;
        (( count++ )) ;
      }
    ;;
  esac
done

exit "${count}" ;

# That's all Folks!
